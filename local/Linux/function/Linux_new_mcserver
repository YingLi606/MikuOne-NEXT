#!/bin/bash
GREEN="\033[92m"
BLUE="\033[94m"
YELLOW="\033[93m"
RED="\033[91m"
RESET="\033[0m"
BASE_DIR="$HOME/.termux/MikuOne-NEXT/MCserver"  

check_commands() {
    echo -e "${BLUE}[检测] 正在检查必要命令...${RESET}"
    local cmds=("whiptail" "wget" "java" "find" "chmod" "rm")
    for cmd in "${cmds[@]}"; do
        if ! command -v "$cmd" &> /dev/null; then
            echo -e "${RED}[错误] 缺少命令 $cmd，请安装后重试！${RESET}"
            sleep 3 && clear && exit 1
        fi
    done
    [ ! -d "$BASE_DIR" ] && { mkdir -p "$BASE_DIR"; chmod 755 "$BASE_DIR"; }
}

check_system() {
    check_commands
    if ! command -v lsb_release &> /dev/null; then
        echo -e "${RED}[错误] 无lsb_release，无法识别系统！${RESET}"
        sleep 5 && clear && exit 1
    fi
    OS=$(lsb_release -is)
    SUPPORTED=("Ubuntu" "Kali" "Debian" "GXDE" "Deepin" "UOS")
    [[ ! " ${SUPPORTED[@]} " =~ " ${OS} " ]] && {
        echo -e "${RED}[错误] 系统${OS}未适配，仅支持${SUPPORTED[*]}！${RESET}"
        sleep 5 && clear && exit 1
    }
    echo -e "${GREEN}[成功] 适配系统：${OS}${RESET}"
}

check_java() {
    echo -e "${BLUE}[检测] 检查Java 21...${RESET}"
    if command -v java &> /dev/null && java -version 2>&1 | grep -q "21"; then
        echo -e "${GREEN}[成功] Java 21已安装${RESET}"
    else
        echo -e "${YELLOW}[提示] 正在安装Java 21...${RESET}"
        apt update &> /dev/null && apt install openjdk-21-jre -y &> /dev/null
        if ! java -version 2>&1 | grep -q "21"; then
            echo -e "${RED}[错误] Java 21安装失败！${RESET}"
            sleep 5 && clear && exit 1
        fi
    fi
}

install_core() {
    local CORE_JAR="" INSTALL_DIR="" CORE_TYPE="" VERSION=""
    # 1. 选择服务端类型
    CORE=$(whiptail --title "选服务端类型" --menu "请选择要安装的服务端" 15 50 4 \
        "1" "Paper" "2" "Spigot" "3" "Nukkit" "4" "Fabric" \
        3>&1 1>&2 2>&3)
    [ -z "$CORE" ] && return

    # 2. 服务端版本选择与下载（保留原逻辑，确保CORE_JAR赋值正确）
    case $CORE in
        1)
            CORE_TYPE="Paper"
            VER=$(whiptail --title "选Paper版本" --menu "选择1.21开头版本" 12 40 2 \
                "1" "1.21.9" "2" "1.21.8" \
                3>&1 1>&2 2>&3)
            [ -z "$VER" ] && return
            VERSION=$([ $VER -eq 1 ] && echo "1.21.9" || echo "1.21.8")
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="paper.jar"  # 服务端启动器JAR文件名
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            echo -e "${BLUE}[下载] 开始下载Paper $VERSION 核心...${RESET}"
            wget --show-progress "https://meta.fabricmc.net/v2/versions/loader/1.21.9/0.17.2/1.1.0/server/jar" -O "$CORE_JAR"
            ;;
        2)
            CORE_TYPE="Spigot"
            VERSION="1.21.8"
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="spigot.jar"  # 服务端启动器JAR文件名
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            echo -e "${BLUE}[下载] 开始下载Spigot $VERSION 核心...${RESET}"
            wget --show-progress "https://cdn.getbukkit.org/spigot/spigot-1.21.8.jar" -O "$CORE_JAR"
            ;;
        3)
            CORE_TYPE="Nukkit"
            VERSION="build1120"
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="nukkit.jar"  # 服务端启动器JAR文件名
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            echo -e "${BLUE}[下载] 开始下载Nukkit $VERSION 核心...${RESET}"
            wget --show-progress "https://download.fastmirror.net/download/NukkitX/general/build1120" -O "$CORE_JAR"
            ;;
        4)
            CORE_TYPE="Fabric"
            VER=$(whiptail --title "选Fabric版本" --menu "选择1.21开头版本" 12 40 2 \
                "1" "1.21.9" "2" "1.21.8" \
                3>&1 1>&2 2>&3)
            [ -z "$VER" ] && return
            VERSION=$([ $VER -eq 1 ] && echo "1.21.9" || echo "1.21.8")
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="fabric.jar"  # 服务端启动器JAR文件名
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            echo -e "${BLUE}[下载] 开始下载Fabric $VERSION 核心...${RESET}"
            wget --show-progress "https://meta.fabricmc.net/v2/versions/loader/$VERSION/0.17.2/1.1.0/server/jar" -O "$CORE_JAR"
            echo -e "${BLUE}[下载] 开始下载Fabric API $VERSION...${RESET}"
            [ $VER -eq 1 ] && wget --show-progress "https://cdn.modrinth.com/data/P7dR8mSH/versions/iHrvVvaM/fabric-api-0.134.0%2B1.21.9.jar" -O plugins/fabric-api.jar || wget --show-progress "https://cdn.modrinth.com/data/P7dR8mSH/versions/7X7rQ0X7/fabric-api-0.133.1%2B1.21.8.jar" -O plugins/fabric-api.jar
            ;;
    esac

    # 3. 自定义Java内存参数（保留原输入逻辑）
    MEM_SIZE=$(whiptail --title "自定义内存参数" --inputbox "请输入服务器内存大小（格式：1G/2G/4G，默认2G）" 10 50 "2G" 3>&1 1>&2 2>&3)
    [[ ! "$MEM_SIZE" =~ [Gg]$ ]] && MEM_SIZE="${MEM_SIZE}G"
    echo -e "${YELLOW}[提示] 已设置服务器内存参数：-Xmx$MEM_SIZE${RESET}"

    # 4. 核心修改：生成start.sh，按要求写入java命令（仅-Xmx参数+服务端JAR文件名）
    cat > "$INSTALL_DIR/start.sh" << EOF
#!/bin/bash
cd "$INSTALL_DIR"
echo "eula=true" > "$INSTALL_DIR/eula.txt"
# 按要求保留：仅-Xmx内存参数 + 服务端启动器JAR文件名 + nogui
java -Xmx$MEM_SIZE -jar $CORE_JAR nogui
EOF
    chmod +x "$INSTALL_DIR/start.sh"
    echo -e "${GREEN}[成功] 启动脚本创建完成，路径：$INSTALL_DIR/start.sh${RESET}"
    echo -e "${GREEN}[脚本内容] java命令已保存：java -Xmx$MEM_SIZE -jar $CORE_JAR nogui${RESET}"

    # 5. 自动启动（保留原逻辑）
    echo -e "${BLUE}[启动] $CORE_TYPE-$VERSION 正在启动（内存：$MEM_SIZE）...${RESET}"
    bash "$INSTALL_DIR/start.sh"
    [ $? -ne 0 ] && echo -e "${RED}[错误] 启动失败，可手动执行 $INSTALL_DIR/start.sh 排查${RESET}" && sleep 3
}

plugin_store() {
    local CORE_TYPE_LIST=()
    local TARGET_CORES=("Paper" "Spigot" "Fabric")
    for CORE in "${TARGET_CORES[@]}"; do
        [ -d "$BASE_DIR/$CORE" ] && CORE_TYPE_LIST+=("$CORE" "$CORE")
    done
    [ ${#CORE_TYPE_LIST[@]} -eq 0 ] && {
        echo -e "${RED}[错误] $BASE_DIR 下无已安装的Paper/Spigot/Fabric服务端！${RESET}"
        sleep 3 && return
    }

    SELECTED_CORE=$(whiptail --title "选择服务端类型" --menu "已安装服务端类型" 15 50 3 "${CORE_TYPE_LIST[@]}" 3>&1 1>&2 2>&3)
    [ -z "$SELECTED_CORE" ] && return

    local VER_LIST=()
    local CORE_PATH="$BASE_DIR/$SELECTED_CORE"
    for VER_DIR in "$CORE_PATH"/1.21.*; do
        [ -d "$VER_DIR" ] || continue
        local VER_NAME=$(basename "$VER_DIR")
        if [ -d "$VER_DIR/plugins" ]; then
            VER_LIST+=("$VER_DIR" "${SELECTED_CORE}-${VER_NAME}")
        else
            echo -e "${YELLOW}[提示] ${SELECTED_CORE}-${VER_NAME} 无plugins文件夹，不可下载插件${RESET}"
        fi
    done
    [ ${#VER_LIST[@]} -eq 0 ] && {
        echo -e "${RED}[错误] ${SELECTED_CORE} 下无带plugins文件夹的1.21版本！${RESET}"
        sleep 3 && return
    }

    SELECTED_VER_DIR=$(whiptail --title "选择版本" --menu "${SELECTED_CORE} 可下载插件的版本" 20 60 10 "${VER_LIST[@]}" 3>&1 1>&2 2>&3)
    [ -z "$SELECTED_VER_DIR" ] && return
    local PLUGIN_DIR="$SELECTED_VER_DIR/plugins"

    echo -e "${BLUE}[下载] 开始下载 ${SELECTED_CORE} 版Geyser（目标路径：$PLUGIN_DIR）...${RESET}"
    if [ "$SELECTED_CORE" = "Fabric" ]; then
        wget --show-progress "https://download.geysermc.org/v2/projects/geyser/versions/2.8.4/builds/947/downloads/fabric" -O "$PLUGIN_DIR/Geyser-Fabric.jar"
    else
        wget --show-progress "https://download.geysermc.org/v2/projects/geyser/versions/latest/builds/latest/downloads/spigot" -O "$PLUGIN_DIR/Geyser-Spigot.jar"
    fi

    [ $? -eq 0 ] && echo -e "${GREEN}[成功] Geyser插件已下载至：$PLUGIN_DIR${RESET}" || echo -e "${RED}[错误] Geyser插件下载失败，请检查网络后重试！${RESET}"
    sleep 3
}

INSTALL_MC_SERVER_NEW() {
    check_system
    check_java
    while true; do
        MAIN_MENU=$(whiptail --title "MC服务器管理（新）" --menu "功能测试中，不代表最终品质" 15 50 3 \
            "1" "📦 安装服务器核心" "2" "📥 插件商店" "3" "🌚 退出" \
            3>&1 1>&2 2>&3)
        case $MAIN_MENU in
            1) install_core ;;
            2) plugin_store ;;
            3)
                echo -e "${BLUE}[退出] 3秒后退出...${RESET}"
                sleep 3 && clear && exit 0
                ;;
            *) clear && exit 0 ;;
        esac
    done
}

[[ "${BASH_SOURCE[0]}" == "$0" ]] && INSTALL_MC_SERVER_NEW
