install_core() {
    local CORE_JAR="" INSTALL_DIR="" CORE_TYPE="" VERSION="" MEM_PARAM="" MEM_MIN="" MEM_MAX=""
    CORE=$(whiptail --title "选服务端类型" --menu "请选择要安装的服务端" 15 50 4 \
        "1" "Paper" "2" "Spigot" "3" "Nukkit" "4" "Fabric" \
        3>&1 1>&2 2>&3)
    [ -z "$CORE" ] && return

    case $CORE in
        1)
            CORE_TYPE="Paper"
            VER=$(whiptail --title "选Paper版本" --menu "选择版本" 12 40 2 \
                "1" "1.21.10" "2" "1.21.8" \
                3>&1 1>&2 2>&3)
            [ -z "$VER" ] && return
            VERSION=$([ $VER -eq 1 ] && echo "1.21.10" || echo "1.21.8")
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="paper.jar"
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            clear
            echo -e "${INFO} 开始下载Paper $VERSION 核心...${RESET}"
            if [ "$VERSION" = "1.21.10" ]; then
                wget --show-progress "https://fill-data.papermc.io/v1/objects/23f6560d17e285149c0e486579e3fcc8208dcc171a59c4d021057a9063534732/paper-1.21.10-64.jar" -O "$CORE_JAR"
            else
                wget --show-progress "https://fill-data.papermc.io/v1/objects/8de7c52c3b02403503d16fac58003f1efef7dd7a0256786843927fa92ee57f1e/paper-1.21.8-60.jar" -O "$CORE_JAR"
            fi
            ;;
        2)
            CORE_TYPE="Spigot"
            VER=$(whiptail --title "选Spigot版本" --menu "选择版本" 10 40 1 \
                "1" "1.21.8" \
                3>&1 1>&2 2>&3)
            [ -z "$VER" ] && return
            VERSION="1.21.8"
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="spigot.jar"
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            clear
            echo -e "${INFO} 开始下载Spigot $VERSION 核心...${RESET}"
            wget --show-progress "https://cdn.getbukkit.org/spigot/spigot-1.21.8.jar" -O "$CORE_JAR"
            ;;
        3)
            CORE_TYPE="Nukkit"
            VER=$(whiptail --title "选Nukkit版本" --menu "选择版本" 10 40 1 \
                "1" "build1120" \
                3>&1 1>&2 2>&3)
            [ -z "$VER" ] && return
            VERSION="build1120"
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="nukkit.jar"
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            echo -e "${INFO} 开始下载Nukkit $VERSION 核心...${RESET}"
            wget --show-progress "https://download.fastmirror.net/download/NukkitX/general/build1120" -O "$CORE_JAR"
            ;;
        4)
            CORE_TYPE="Fabric"
            VER=$(whiptail --title "选Fabric版本" --menu "选择版本" 12 40 2 \
                "1" "1.21.10" "2" "1.21.9" \
                3>&1 1>&2 2>&3)
            [ -z "$VER" ] && return
            VERSION=$([ $VER -eq 1 ] && echo "1.21.10" || echo "1.21.9")
            INSTALL_DIR="$BASE_DIR/$CORE_TYPE/$VERSION"  
            CORE_JAR="fabric.jar"
            mkdir -p "$INSTALL_DIR/plugins" && cd "$INSTALL_DIR"
            echo -e "${INFO} 开始下载Fabric $VERSION 核心...${RESET}"
            if [ "$VERSION" = "1.21.10" ]; then
                sudo curl -OJ "https://meta.fabricmc.net/v2/versions/loader/1.21.10/0.17.3/1.1.0/server/jar" -o "$CORE_JAR"
            else
                sudo curl -OJ "https://meta.fabricmc.net/v2/versions/loader/1.21.9/0.17.3/1.1.0/server/jar" -o "$CORE_JAR"
            fi
            echo -e "${INFO} 开始下载Fabric API $VERSION...${RESET}"
            if [ "$VERSION" = "1.21.10" ]; then
                wget --show-progress "https://cdn.modrinth.com/data/P7dR8mSH/versions/qNm2IWMn/fabric-api-0.135.0%2B1.21.10.jar" -O plugins/fabric-api.jar
            else
                wget --show-progress "https://cdn.modrinth.com/data/P7dR8mSH/versions/iHrvVvaM/fabric-api-0.134.0%2B1.21.9.jar" -O plugins/fabric-api.jar
            fi
            ;;
    esac
    echo -e "${SUSSEC} $CORE_TYPE-$VERSION 服务端核心下载完成，路径：$INSTALL_DIR${RESET}"

    echo -e "${INFO} 第一步：配置Java可执行文件路径...${RESET}"
    sleep 2
    local java_paths=$(ls /usr/lib/jvm/*/bin/java 2>/dev/null)
    if [ -z "$java_paths" ]; then
        echo -e "${WORRY} 未检测到系统默认Java路径，请手动输入完整路径${RESET}"
        java_paths="无默认Java路径"
    fi
    read -e -p "请输入Java可执行文件路径（已安装路径参考：
$java_paths
）:" wherejava
    if [ ! -x "$wherejava" ]; then
        echo -e "${WORRY} 输入路径无效，自动切换为系统默认Java命令${RESET}"
        wherejava="java"
    fi

    echo -e "${INFO} 第二步：配置服务器内存参数...${RESET}"
    sleep 2
    # 按服务端类型单独处理内存自定义，Fabric独立配置
    if [ "$CORE_TYPE" = "Fabric" ]; then
        MEM_MIN=$(whiptail --title "配置Fabric最小内存(-Xms)" --inputbox "请输入Fabric最小内存（格式：1G/2G，默认2G）" 10 50 "2G" 3>&1 1>&2 2>&3)
        [[ ! "$MEM_MIN" =~ [Gg]$ ]] && MEM_MIN="${MEM_MIN}G"
        MEM_MAX=$(whiptail --title "配置Fabric最大内存(-Xmx)" --inputbox "请输入Fabric最大内存（格式：2G/4G，默认2G）" 10 50 "2G" 3>&1 1>&2 2>&3)
        [[ ! "$MEM_MAX" =~ [Gg]$ ]] && MEM_MAX="${MEM_MAX}G"
    else
        MEM_MIN=$(whiptail --title "配置最小内存(-Xms)" --inputbox "请输入最小内存（格式：1G/2G，默认2G）" 10 50 "2G" 3>&1 1>&2 2>&3)
        [[ ! "$MEM_MIN" =~ [Gg]$ ]] && MEM_MIN="${MEM_MIN}G"
        MEM_MAX=$(whiptail --title "配置最大内存(-Xmx)" --inputbox "请输入最大内存（格式：2G/4G，默认2G）" 10 50 "2G" 3>&1 1>&2 2>&3)
        [[ ! "$MEM_MAX" =~ [Gg]$ ]] && MEM_MAX="${MEM_MAX}G"
    fi
    MEM_PARAM="-Xms$MEM_MIN -Xmx$MEM_MAX"
    echo -e "${WORRY} 已设置内存参数：$MEM_PARAM${RESET}"

    local full_jar_path="$INSTALL_DIR/$CORE_JAR"
    local full_eula_path="$INSTALL_DIR/eula.txt"
    cat > "$INSTALL_DIR/start.sh" << EOF
#!/bin/bash
cd "$INSTALL_DIR"
echo -e "eula=true" > "$full_eula_path"
$wherejava $MEM_PARAM -jar "$full_jar_path" nogui
EOF
    chmod +x "$INSTALL_DIR/start.sh"
    echo -e "${SUSSEC} 启动脚本生成完成${RESET}"

    echo -e "${INFO} $CORE_TYPE-$VERSION 服务端启动中（内存：$MEM_PARAM）...${RESET}"
    bash "$INSTALL_DIR/start.sh"
    [ $? -ne 0 ] && echo -e "${ERROR} 启动失败，可手动执行 $INSTALL_DIR/start.sh 查看日志排查${RESET}" && sleep 3
}
